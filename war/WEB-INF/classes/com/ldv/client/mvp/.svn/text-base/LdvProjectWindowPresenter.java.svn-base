package com.ldv.client.mvp;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.allen_sauer.gwt.log.client.Log;
import com.google.gwt.core.client.Scheduler;
import com.google.gwt.core.client.Scheduler.ScheduledCommand;
import com.google.gwt.dom.client.Style;
import com.google.gwt.event.dom.client.MouseDownEvent;
import com.google.gwt.event.dom.client.MouseDownHandler;
import com.google.gwt.event.dom.client.MouseMoveEvent;
import com.google.gwt.event.dom.client.MouseMoveHandler;
import com.google.gwt.event.dom.client.MouseOverEvent;
import com.google.gwt.event.dom.client.MouseOverHandler;
import com.google.gwt.event.dom.client.MouseUpEvent;
import com.google.gwt.event.dom.client.MouseUpHandler;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.user.client.ui.FocusPanel;
import com.google.gwt.user.client.ui.ScrollPanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.inject.Inject;
import com.ldv.client.event.LdvBaseLineInitEvent;
import com.ldv.client.event.LdvConcernLineInitEvent;
import com.ldv.client.event.LdvProjectInitEvent;
import com.ldv.client.event.LdvProjectInitEventHandler;
import com.ldv.client.event.LdvRedrawProjectWindowEvent;
import com.ldv.client.event.LdvRedrawProjectWindowEventHandler;
import com.ldv.client.event.LdvRedrawConcernLineEvent;
import com.ldv.client.model.LdvModelConcern;
import com.ldv.client.model.LdvModelDocument;
import com.ldv.client.model.LdvModelProject;
import com.ldv.client.mvp_toons.LdvBaseLinePresenter;
import com.ldv.client.mvp_toons.LdvConcernLinePresenter;
import com.ldv.client.util.LdvSupervisor;
import com.ldv.client.util.LdvTimeZoomLevel.pixUnit;
import com.ldv.shared.model.LdvTime;

import net.customware.gwt.presenter.client.EventBus;
import net.customware.gwt.presenter.client.place.Place;
import net.customware.gwt.presenter.client.place.PlaceRequest;
import net.customware.gwt.presenter.client.widget.WidgetDisplay;
import net.customware.gwt.presenter.client.widget.WidgetPresenter;

public class LdvProjectWindowPresenter extends WidgetPresenter<LdvProjectWindowPresenter.Display>
{
	
	private LdvModelProject                _projectModel ;
	private LdvTimeControlledAreaPresenter _timeControlledArea ;
	private boolean                        _isBound = false ;
	private ScheduledCommand 							 _pendingEvents = null ;
	private AbsolutePanel 								 _workspace ;
	private LdvBaseLinePresenter 					 _baseLine = null ;
	private ArrayList<LdvModelConcern> 		 _concernsModelsArray = null ; 
	private ArrayList<LdvModelDocument>		 _documentsModelsArray = null ;	
	private ArrayList<LdvConcernLinePresenter>  _concernLinesArray = null ;
	
	private boolean												 _isCurrentProject = false ;	
	private double 												 _projectScrollAreaWidthRatio ;
	private boolean 											 _onTopDrag = false ;
	private boolean												 _onBottomDrag = false ;
	private boolean 											 _onLeftDrag = false ;
	private boolean												 _onRightDrag = false ;
	private boolean												 _onMoveDrag = false ;	
  private int 													 _startRelativeY ;
  private int 													 _startRelativeX ;
  private int 													 _projectTop ;
  private int 													 _projectBottom ;
  private int 													 _projectLeft ;
  private int														 _projectRight ;
  private int 													 _projectHeight ;
  private int 													 _projectWidth ;	

	public interface Display extends WidgetDisplay 
	{	
		public AbsolutePanel getMainPanel() ;
		public AbsolutePanel getBaseLinePanel() ;
		public AbsolutePanel getWorkSpacePanel() ;
		public FocusPanel    getTopFocusPanel() ;
		public FocusPanel    getBottomFocusPanel() ;
		public FocusPanel 	 getLeftFocusPanel() ;
		public FocusPanel 	 getRightFocusPanel() ;
		public FocusPanel    getBarFocusPanel() ;
		public void 			   setHeight(int height) ;
		public void 				 setTop(int top) ;
		public void 				 setBottom(int bottom) ;
		public void 				 setLeft(int left) ;
		public void 				 setRight(int right) ;
	}
	
	private final LdvSupervisor _supervisor ;

	public static final Place PLACE = new Place("Time Controler") ;
		
	@Inject
	public LdvProjectWindowPresenter(final Display       display, 
			                             final EventBus      eventBus,
			                             final LdvSupervisor supervisor) 
	{	
		super(display, eventBus);	
		_supervisor = supervisor ;		
		bind() ;	
		_isBound = true ;	
		Log.info("entering constructor of LdvProjectWindowPresenter.");
	}
	  
	@Override
	public Place getPlace() {
		return PLACE ;
	}

	@Override
	protected void onBind() 
	{			
		eventBus.addHandler(LdvProjectInitEvent.TYPE, new LdvProjectInitEventHandler() 
		{
			@Override
			public void onInitSend(LdvProjectInitEvent event) 
			{
				Log.info("Handling LdvProjectInitEvent event");
				initComponents(event) ;
			}
		});
		
		eventBus.addHandler(LdvRedrawProjectWindowEvent.TYPE, new LdvRedrawProjectWindowEventHandler() 
		{
			@Override
			public void onRedrawProjectWindowSend(LdvRedrawProjectWindowEvent event) 
			{
				Log.info("Handling LdvRedrawProjectWindowEvent event");
				redrawComponents(event) ;
			}
		});
		
		//Move the top edge
		//
		display.getTopFocusPanel().addMouseDownHandler(new MouseDownHandler(){
			@Override
			public void onMouseDown(final MouseDownEvent event){
				_onTopDrag = true ;
				_startRelativeY = event.getRelativeY(_timeControlledArea.getDisplay().getMainPanel().getElement()) ;
			  _projectTop = display.getMainPanel().getElement().getOffsetTop() ;
			}
		});
		
		display.getTopFocusPanel().addMouseUpHandler(new MouseUpHandler(){
			@Override
			public void onMouseUp(final MouseUpEvent event){
				_onTopDrag = false ;	
			}
		});
		
		display.getTopFocusPanel().addMouseMoveHandler(new MouseMoveHandler(){		
			@Override
			public void onMouseMove(MouseMoveEvent event){
				
				if(true == _onTopDrag){
					int relativeY = event.getRelativeY(_timeControlledArea.getDisplay().getMainPanel().getElement()) ;
					int deltaDrag = relativeY - _startRelativeY ;
					int newTop = _projectTop + deltaDrag ;
					display.setTop(newTop) ;
				}
			}
		});
		
		//Move the bottom edge
		//
		display.getBottomFocusPanel().addMouseDownHandler(new MouseDownHandler(){
			@Override
			public void onMouseDown(final MouseDownEvent event){
				_onBottomDrag = true ;
				_startRelativeY = event.getRelativeY(_timeControlledArea.getDisplay().getMainPanel().getElement()) ;
				int projectAbsoluteBottom = display.getMainPanel().getElement().getAbsoluteBottom() ;
				int controlledAreaBottom = _timeControlledArea.getDisplay().getMainPanel().getElement().getAbsoluteBottom() ;
				_projectBottom = controlledAreaBottom - projectAbsoluteBottom ;
				
			}
		});
		
		display.getBottomFocusPanel().addMouseUpHandler(new MouseUpHandler(){
			@Override
			public void onMouseUp(final MouseUpEvent event){
				_onBottomDrag = false ;	
			}
		});
		
		display.getBottomFocusPanel().addMouseMoveHandler(new MouseMoveHandler(){		
			@Override
			public void onMouseMove(MouseMoveEvent event){
				
				if(true == _onBottomDrag){
					int relativeY = event.getRelativeY(_timeControlledArea.getDisplay().getMainPanel().getElement()) ;
					int deltaDrag = relativeY - _startRelativeY ;
					int newBottom = _projectBottom - deltaDrag ;
					display.setBottom(newBottom) ;
				}				
			}
		});
		
		//Move the left edge
		//
		display.getLeftFocusPanel().addMouseDownHandler(new MouseDownHandler(){
			@Override
			public void onMouseDown(final MouseDownEvent event){
				_onLeftDrag = true ;
				_startRelativeX = event.getRelativeX(_timeControlledArea.getDisplay().getMainPanel().getElement()) ;
				_projectLeft = display.getMainPanel().getElement().getOffsetLeft() ;				
			}
		});
		
		display.getLeftFocusPanel().addMouseUpHandler(new MouseUpHandler(){
			@Override
			public void onMouseUp(final MouseUpEvent event){
				_onLeftDrag = false ;	
			}
		});
		
		display.getLeftFocusPanel().addMouseMoveHandler(new MouseMoveHandler(){		
			@Override
			public void onMouseMove(MouseMoveEvent event){
				
				if(true == _onLeftDrag){
					int relativeX = event.getRelativeX(_timeControlledArea.getDisplay().getMainPanel().getElement()) ;
					int deltaDrag = relativeX - _startRelativeX ;
					int newLeft = _projectLeft + deltaDrag ;
					display.setLeft(newLeft) ;
					
					//redraw the concern lines
					display.getWorkSpacePanel().clear() ;
					redrawConcerlines() ;				
				}				
			}
		});
		
		//Move the right edge
		//
		display.getRightFocusPanel().addMouseDownHandler(new MouseDownHandler(){
			@Override
			public void onMouseDown(final MouseDownEvent event){
				_onRightDrag = true ;
				_startRelativeX = event.getRelativeX(_timeControlledArea.getDisplay().getMainPanel().getElement()) ;
				int projectAbsoluteRight = display.getMainPanel().getElement().getAbsoluteRight() ;
				int ControlledAreaRight = _timeControlledArea.getDisplay().getMainPanel().getElement().getAbsoluteRight() ;
				_projectRight = ControlledAreaRight - projectAbsoluteRight ;		
			}
		});		
		
		display.getRightFocusPanel().addMouseUpHandler(new MouseUpHandler(){
			@Override
			public void onMouseUp(final MouseUpEvent event){
				_onRightDrag = false ;	
			}
		});
		
		display.getRightFocusPanel().addMouseMoveHandler(new MouseMoveHandler(){		
			@Override
			public void onMouseMove(MouseMoveEvent event){
				
				if(true == _onRightDrag){
					int relativeX = event.getRelativeX(_timeControlledArea.getDisplay().getMainPanel().getElement()) ;
					int deltaDrag = relativeX - _startRelativeX ;
					int newRight = _projectRight - deltaDrag ;
					display.setRight(newRight) ;
				}				
			}
		});
		
		//Move the project
		display.getBarFocusPanel().addMouseDownHandler(new MouseDownHandler(){
			@Override
			public void onMouseDown(final MouseDownEvent event){
				_onMoveDrag = true ;
				_projectHeight = display.getMainPanel().getOffsetHeight() ;
				_projectWidth = display.getMainPanel().getOffsetWidth() ;
				_startRelativeX = event.getX() ;
				_startRelativeY = event.getY() ;
				_projectLeft = display.getMainPanel().getElement().getOffsetLeft() ;
				_projectTop = display.getMainPanel().getElement().getOffsetTop() ;
			}
		});		
		
		display.getBarFocusPanel().addMouseUpHandler(new MouseUpHandler(){
			@Override
			public void onMouseUp(final MouseUpEvent event){
				_onMoveDrag = false ;	
			}
		});
		
		display.getBarFocusPanel().addMouseMoveHandler(new MouseMoveHandler(){		
			@Override
			public void onMouseMove(MouseMoveEvent event){
				
				if(true == _onMoveDrag){
					
					int relativeX = event.getX() ;
					int relativeY = event.getY() ;
					
					int deltaX = relativeX - _startRelativeX ;
					int deltaY = relativeY - _startRelativeY ;
					
					display.getMainPanel().getElement().getStyle().setLeft((_projectLeft + deltaX), Style.Unit.PX) ;
					display.getMainPanel().getElement().getStyle().setTop((_projectTop + deltaY), Style.Unit.PX) ;
					String strHeight = Integer.toString(_projectHeight) + "px" ;
					String strWidth = Integer.toString(_projectWidth) + "px" ;
					display.getMainPanel().setHeight(strHeight) ;
					display.getMainPanel().setWidth(strWidth) ;
					
				  //redraw the concern lines
					display.getWorkSpacePanel().clear() ;
					redrawConcerlines() ;		
				}				
			}
		});
		
	}
	
	protected void initComponents(LdvProjectInitEvent event)
	{
		// Check if we are the target of this event
		//
		if (event.getTarget() != this)
		{
			return ;
		}
		
		_projectModel = event.getModelProject() ;
		if (null == _projectModel)
		{	
			return ;
		}
		
		// Add display to TimeControlledArea view
		//
		_workspace = (AbsolutePanel) event.getWorkspace() ;
		_workspace.add(display.asWidget()) ;
		
		_timeControlledArea = event.getFather() ;
		
		// Create baseline
		//
		_baseLine = _supervisor.getInjector().getBaseLinePresenter() ;
		if (null == _baseLine)
		{	
			return ;
		}
		initBaseLine(_baseLine) ;
		
		//create concern lines
		//
		_concernsModelsArray = _projectModel.getConcerns() ;
		_documentsModelsArray = _projectModel.getDocuments() ;
		_concernLinesArray = new ArrayList<LdvConcernLinePresenter>() ;
		ArrayList<LdvModelDocument> lineDocumentArray = new ArrayList<LdvModelDocument>() ;
		
		if ((null != _concernsModelsArray) && (false == _concernsModelsArray.isEmpty()))
		{
			 int lineNumber = 0;
			 for (Iterator<LdvModelConcern> iter = _concernsModelsArray.iterator(); iter.hasNext();) 
			 {
				 LdvModelConcern concernModel = iter.next() ;
				 LdvConcernLinePresenter concernLine = _supervisor.getInjector().getConernLinePresenter() ;
				 _concernLinesArray.add(concernLine) ;
				 
				 //add the documents
				 String ID = concernModel.getID() ;
				 
				 if(null != _documentsModelsArray){
					 for(Iterator<LdvModelDocument> iter2 = _documentsModelsArray.iterator(); iter2.hasNext();){
						 LdvModelDocument document = iter2.next() ;
						 String lineID = document.getLineID() ;
						 if(lineID.equals(ID)){
							 lineDocumentArray.add(document) ;
						 }
					 }
				 }
				 				 
				 if (null != concernLine)
				 {
					 initConcernLine(concernLine, concernModel, lineNumber, lineDocumentArray) ;
					 lineNumber++ ;
				 }
			 }
		}
		
		//reset the thumb in TimeControlledArea
		_timeControlledArea.resetThumb() ;
		
	}
	
	public void initBaseLine(final LdvBaseLinePresenter baseLine) {
				
		if (false == eventBus.isEventHandled(LdvBaseLineInitEvent.TYPE))
		{
			_pendingEvents = new ScheduledCommand() 
				{
					public void execute() {
						_pendingEvents = null ;
						initBaseLine(baseLine) ;
			     }
				};
			 Scheduler.get().scheduleDeferred(_pendingEvents) ;
		}
		else
		{	
			eventBus.fireEvent(new LdvBaseLineInitEvent(display.getBaseLinePanel(), baseLine, this)) ;
		}			
	}
	
	public void initConcernLine(final LdvConcernLinePresenter concernLine, final LdvModelConcern concernModel, final int numberLine, final ArrayList<LdvModelDocument> lineDocumentArray) {
		
		if (false == eventBus.isEventHandled(LdvConcernLineInitEvent.TYPE))
		{
			_pendingEvents = new ScheduledCommand() 
				{
					public void execute() {
						_pendingEvents = null ;
						initConcernLine(concernLine, concernModel, numberLine, lineDocumentArray) ;
			     }
				};
			 Scheduler.get().scheduleDeferred(_pendingEvents) ;
		}
		else
		{	
			eventBus.fireEvent(new LdvConcernLineInitEvent(display.getWorkSpacePanel(), concernLine, this, concernModel, numberLine, lineDocumentArray)) ;
		}			
	}
	
	public void redrawComponents(LdvRedrawProjectWindowEvent event){
		
		if (event.getTarget() != this)
		{
			return ;
		}
		
		display.getWorkSpacePanel().clear() ;
		
		//redraw the baseline
/*		if (null == _baseLine)
		{	
			return ;
		}
		eventBus.fireEvent(new LdvBaseLineInitEvent(display.getBaseLinePanel(), _baseLine, this)) ;
*/		
		redrawConcerlines() ;
		
	}
	
	public void redrawConcerlines(){
			for(Iterator<LdvConcernLinePresenter> iter = _concernLinesArray.iterator(); iter.hasNext();){
				LdvConcernLinePresenter concernLine = iter.next() ;
				Log.info("fire redraw conern line event");
				eventBus.fireEvent(new LdvRedrawConcernLineEvent(this, concernLine)) ;
			}	
	}
	
	public void setTimeControlledArea(LdvTimeControlledAreaPresenter timeControlledArea) {
		_timeControlledArea = timeControlledArea ;
	}
	
	public long getInternalPhysicalPosition(LdvTime ldvTime)
	{			
		int elementOffsetLeft = DOM.getElementPropertyInt(display.getMainPanel().getElement(), "offsetLeft");
		return (_timeControlledArea.getDisplay().getInternalPhysicalPosition(ldvTime) - elementOffsetLeft);
	}

	public boolean IsBound() {                       
		return _isBound ; 
	}
	
	public boolean getIsCurrentProject(){
		return this._isCurrentProject ;
	}
	
	public void setIsCurrentProject(boolean isCurrentProject){
		this._isCurrentProject = isCurrentProject ;
	}
	
	public double getProjectScrollAreaWidthRatio(){
		return this._projectScrollAreaWidthRatio ;
	}
	
	public void setProjectScrollAreaWidthRatio(double ratio){
		this._projectScrollAreaWidthRatio = ratio ;
	}
	
	@Override
	protected void onPlaceRequest(PlaceRequest request) {
		
	}

	@Override
	protected void onUnbind() {
		
	}

	@Override
	public void refreshDisplay() {
		
	}

	@Override
	public void revealDisplay() {
		
	}
}

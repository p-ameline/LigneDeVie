package com.ldv.client.mvp;

import java.util.ArrayList;

import com.allen_sauer.gwt.log.client.Log;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.MouseDownEvent;
import com.google.gwt.event.dom.client.MouseDownHandler;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.DialogBox;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.inject.Inject;
import com.ldv.client.canvas.LdvCanvas;
import com.ldv.client.canvas.LdvListObject;
import com.ldv.client.canvas.LdvObject;
import com.ldv.client.model.LdvModelMandatePair;

import net.customware.gwt.presenter.client.EventBus;
import net.customware.gwt.presenter.client.place.Place;
import net.customware.gwt.presenter.client.place.PlaceRequest;
import net.customware.gwt.presenter.client.widget.WidgetDisplay;
import net.customware.gwt.presenter.client.widget.WidgetPresenter;

public class LdvCanvasPresenter extends WidgetPresenter<LdvCanvasPresenter.Display>{

	private int x;
	private int y;
	// here initial the listMandate for test
	private ArrayList<LdvModelMandatePair> listMandate;
	
	public interface Display extends WidgetDisplay {
		public LdvCanvas getCanvas();
		public LdvObject hiTest(double x, double y);
		public LdvListObject getListObject();
		public ArrayList<LdvModelMandatePair> getListMandate();
	}
	
	public static final Place PLACE = new Place("Canvas") ;
	
	@Inject
	public LdvCanvasPresenter(final Display display, EventBus eventBus) {
		
		super(display, eventBus);	
		bind();
		Log.info("entering constructor of LdvCanvasPresenter.");
		
	}
	
	public void doMouseDown(){
		Log.info("Calling doMouseDown");	
		//System.out.println("x: "+x+", y: "+y);
		LdvObject clickObject = display.hiTest(x,y);
		if(clickObject.getName().equalsIgnoreCase(new String("icon"))){
			
		}else if(null != clickObject){					
			DialogBox newMandate = new MyDialog(clickObject);
			newMandate.center();
		}
	}
	
	public void addMendate(LdvModelMandatePair mandatePair){
		
		listMandate = display.getListMandate();
		listMandate.add(mandatePair);

		// MaxHeight is the height of the icons
		int height = display.getListObject().getMaxHeight();
				
		mandatePair.getMandate().setIcon(display.getCanvas(), x, y, height);
		display.getListObject().add(mandatePair.getMandate().getIcon());
		mandatePair.getMandate().getIcon().draw();
		
	}
	
	@Override
	protected void onBind() {
		display.getCanvas().addMouseHandler(new MouseDownHandler(){			
			@Override
			public void onMouseDown(MouseDownEvent event) {
				x = event.getX();
				y = event.getY();
				doMouseDown();			
			}		
		});	
	}
	
	class MyDialog extends DialogBox{  
		public MyDialog(LdvObject clickObject) {
		    
			//this.setWidth("100%");
			setText("New Mandate");
		    
		    HTML msg = new HTML("<center>A customize dialog box for new mandate.</center>",true);

		    FlexTable table = new FlexTable();
		    Label label1 = new Label("Name");
		    Label label2 = new Label("Job");
		    Label label3 = new Label("Speciality");
		    Label label4 = new Label("Begin Date");
		    Label label5 = new Label("End Date");
		    Label label6 = new Label("Mandate Type");
		    
		    final TextBox nameBox = new TextBox();
		    final TextBox jobBox = new TextBox();
		    final TextBox specialityBox = new TextBox();
		    final TextBox beginTimeBox = new TextBox();
		    final TextBox endTimeBox = new TextBox();
		    final TextBox typeBox = new TextBox();
		    
		    table.setWidget(0, 0, label1);
		    table.setWidget(0, 1, nameBox);
		    table.setWidget(1, 0, label2);
		    table.setWidget(1, 1, jobBox);
		    table.setWidget(2, 0, label3);
		    table.setWidget(2, 1, specialityBox);
		    table.setWidget(3, 0, label4);
		    table.setWidget(3, 1, beginTimeBox);
		    table.setWidget(4, 0, label5);
		    table.setWidget(4, 1, endTimeBox);
		    table.setWidget(4, 0, label6);
		    table.setWidget(4, 1, typeBox);
		    
		    Button cancelButton = new Button("Cancel");
		    Button addButton = new Button("Add");
		    
			cancelButton.addClickHandler(new ClickHandler() {
		        public void onClick(ClickEvent event) {
		          MyDialog.this.hide();
		        }
		      });

			addButton.addClickHandler(new ClickHandler(){
				public void onClick(ClickEvent event){
					String name = new String(nameBox.getText());
					LdvModelMandatePair mandatePair = new LdvModelMandatePair();
					mandatePair.getMember().setLabel(name);
					addMendate(mandatePair);
					MyDialog.this.hide();
				}
			});
			
		    VerticalPanel panel = new VerticalPanel();
		    
		    HorizontalPanel hPanel = new HorizontalPanel();
		    hPanel.add(addButton);
		    hPanel.add(cancelButton);
		    
		    panel.setSpacing(6);
		    panel.add(msg);
		    panel.add(table);
		    panel.add(hPanel);	
		    
		    panel.setCellHorizontalAlignment(hPanel, VerticalPanel.ALIGN_RIGHT);
		    setWidget(panel);
		}	
	}
	
	@Override
	public Place getPlace() {
		return PLACE;
	}

	@Override
	protected void onPlaceRequest(PlaceRequest request) {
		
	}

	@Override
	protected void onUnbind() {
		
	}

	@Override
	public void refreshDisplay() {
		
	}

	@Override
	public void revealDisplay() {
		
	}	
}

package com.ldv.client.mvp;

import java.util.ArrayList;

import net.customware.gwt.dispatch.client.DispatchAsync;
import net.customware.gwt.presenter.client.EventBus;
import net.customware.gwt.presenter.client.place.Place;
import net.customware.gwt.presenter.client.place.PlaceRequest;
import net.customware.gwt.presenter.client.widget.WidgetDisplay;
import net.customware.gwt.presenter.client.widget.WidgetPresenter;
import com.allen_sauer.gwt.log.client.Log;
import com.google.gwt.core.client.Scheduler;
import com.google.gwt.core.client.Scheduler.ScheduledCommand;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.inject.Inject;
import com.ldv.client.event.GoToLdvMainEvent;
import com.ldv.client.event.GoToLdvMainEventHandler;
import com.ldv.client.event.LdvMainSentEvent;
import com.ldv.client.gin.LdvGinjector;
import com.ldv.client.model.LdvModelConcern;
import com.ldv.client.model.LdvModelConcernSeverityLevel;
import com.ldv.client.model.LdvModelDocument;
import com.ldv.client.model.LdvModelProject;
import com.ldv.client.util.LdvSupervisor;
import com.ldv.shared.event.GoToLdvRegisterPageEvent;
import com.ldv.shared.event.GoToLdvRegisterPageEventHandler;
import com.ldv.shared.event.LdvRegisterSentEvent;
import com.ldv.shared.event.LdvValidatorSentEvent;
import com.ldv.shared.event.LdvWelcomePageEvent;
import com.ldv.shared.event.BackToWelcomePageEvent;
import com.ldv.shared.event.BackToWelcomePageEventHandler;
import com.ldv.shared.model.LdvTime;

/**
 * LdvMainPresenter is the Root component, switching workspaces and headers
 * according to user navigation
 */
public class LdvMainPresenter extends WidgetPresenter<LdvMainPresenter.Display> 
{
	/**
	 * The message displayed to the user when the server cannot be reached or
	 * returns an error.
	 */
/*private static final String SERVER_ERROR = "An error occurred while "
			+ "attempting to contact the server. Please check your network "
			+ "connection and try again.";
	*/
	public interface Display extends WidgetDisplay 
	{
		public FlowPanel getWorkspace() ;
		public FlowPanel getHeader() ;
		public FlowPanel getFooter() ; 
		//public VerticalPanel getBody();
	}
	
	public static final Place PLACE = new Place("Main");
	
	// private final DispatchAsync    _dispatcher ;
	private final LdvSupervisor    _supervisor ;
	
	private       boolean          _isWelcomePageCreated ;
	// private       boolean          _isUserParamsPageCreated ;
	private       boolean          _isRegisterPageCreated ;
	private       boolean          _isValidatingPageCreated ;
	private       boolean          _isMainLdvPageCreated ;

	private       ScheduledCommand _pendingEvents ;

	@Inject
	public LdvMainPresenter(final Display       display, 
						              final EventBus      eventBus, 
						              final DispatchAsync dispatcher,
						              final LdvSupervisor supervisor) 
	{
		super(display, eventBus) ;
		
		_isRegisterPageCreated   = false ;
		_isValidatingPageCreated = false ;
		// _isUserParamsPageCreated = false ;
		_isWelcomePageCreated    = false ;
		_isMainLdvPageCreated    = false ;
		
		// _dispatcher = dispatcher ;
		_supervisor = supervisor ;
		
		bind() ;
	}
	
	@Override
	protected void onBind() 
	{
		eventBus.addHandler(BackToWelcomePageEvent.TYPE, new BackToWelcomePageEventHandler() {
			@Override
			public void onBackToWelcome(BackToWelcomePageEvent event) 
			{
				Log.info("Back to welcome page") ;
				doLoad() ;	
			}
		});
		
		eventBus.addHandler(GoToLdvRegisterPageEvent.TYPE, new GoToLdvRegisterPageEventHandler() 
		{
			@Override
			public void onGoToRegister(GoToLdvRegisterPageEvent event) 
			{
				Log.info("Call to go to post login page") ;
				goToRegisterPage() ;	
			}
		});
		
		eventBus.addHandler(GoToLdvMainEvent.TYPE, new GoToLdvMainEventHandler() 
		{
			@Override
			public void onGoToMain(GoToLdvMainEvent event) 
			{
				Log.info("Call to go to main page") ;
				goToMainLdvPage() ;	
			}
		});
		
		doLoad() ;
	}

	public void doLoad()
	{
		Log.info("Calling Load");
		if ((false == _isWelcomePageCreated) && (null != _supervisor) && (null != _supervisor.getInjector()))
		{
			LdvGinjector injector = _supervisor.getInjector() ;
			injector.getWelcomePresenter() ;
			_isWelcomePageCreated = true ;
		}
		display.getWorkspace().clear() ;
		eventBus.fireEvent(new LdvWelcomePageEvent(display.getWorkspace())) ;
	}
	
	public void goToMainLdvPage()
	{
		Log.info("Going to main Ldv page") ;
		display.getWorkspace().clear() ;
		if ((false == _isMainLdvPageCreated) && (null != _supervisor) && (null != _supervisor.getInjector()))
		{
			LdvGinjector injector = _supervisor.getInjector() ;
			injector.getTimeControlPresenter() ;
			_isMainLdvPageCreated = true ;
		}

		//Objects of Testing
		final ArrayList<LdvModelProject> projectsModelsList = new ArrayList<LdvModelProject>() ;
		LdvModelProject modelProject1 = new LdvModelProject();
		
		//-----------------------------------------------------------------
		//LdvConcernLine
		//-----------------------------------------------------------------
		LdvModelConcern concernTest1 = new LdvModelConcern() ;
		concernTest1.setTitle("concern line 1");
		concernTest1.setID("concernline1") ;
		LdvTime startTime1 = new LdvTime(0, 1920, 9, 12, 12, 0, 0);
		LdvTime endTime1 = new LdvTime(0, 2000, 9, 12, 12, 0, 0);
		concernTest1.setBeginDate(startTime1);
		concernTest1.setEndDate(endTime1);
		//create the severity
		LdvModelConcernSeverityLevel severityLevel1 = new LdvModelConcernSeverityLevel();
		LdvModelConcernSeverityLevel severityLevel2 = new LdvModelConcernSeverityLevel();
		LdvModelConcernSeverityLevel severityLevel3 = new LdvModelConcernSeverityLevel();
		LdvTime severity1 = new LdvTime(0, 1920, 9, 12, 12, 0, 0);
		LdvTime severity2 = new LdvTime(0, 1940, 1, 1, 1, 0, 0);
		LdvTime severity3 = new LdvTime(0, 1980, 1, 1, 1, 0, 0);
		severityLevel1.setDate(severity1);
		severityLevel1.setSeverityLevel(20);
		severityLevel2.setDate(severity2);
		severityLevel2.setSeverityLevel(40);
		severityLevel3.setDate(severity3);
		severityLevel3.setSeverityLevel(60);
		concernTest1.addSeverity(severityLevel1);
		concernTest1.addSeverity(severityLevel2);
		concernTest1.addSeverity(severityLevel3);
				
		LdvModelConcern concernTest2 = new LdvModelConcern() ;
		concernTest2.setTitle("concern line 2");
		LdvTime startTime2 = new LdvTime(0, 1950, 9, 12, 12, 0, 0);
		LdvTime endTime2 = new LdvTime(0, 2012, 9, 12, 12, 0, 0);
		concernTest2.setBeginDate(startTime2);
		concernTest2.setEndDate(endTime2);
	  //create the severity
		LdvModelConcernSeverityLevel severityLevel4 = new LdvModelConcernSeverityLevel();
		LdvModelConcernSeverityLevel severityLevel5 = new LdvModelConcernSeverityLevel();
		LdvTime severity4 = new LdvTime(0, 1950, 9, 12, 12, 0, 0);
		LdvTime severity5 = new LdvTime(0, 1980, 9, 12, 12, 0, 0);
		severityLevel4.setDate(severity4);
		severityLevel4.setSeverityLevel(60);
		severityLevel5.setDate(severity5);
		severityLevel5.setSeverityLevel(80);
		concernTest2.addSeverity(severityLevel4);
		concernTest2.addSeverity(severityLevel5);
		
		LdvModelConcern concernTest3 = new LdvModelConcern() ;
		concernTest3.setTitle("concern line 3");
		LdvTime startTime3 = new LdvTime(0, 2010, 9, 12, 12, 0, 0);
		LdvTime endTime3 = new LdvTime(0, 2050, 9, 12, 12, 0, 0);
		concernTest3.setBeginDate(startTime3);
		concernTest3.setEndDate(endTime3);
	  //create the severity
		LdvModelConcernSeverityLevel severityLevel6 = new LdvModelConcernSeverityLevel();
		LdvTime severity6 = new LdvTime(0, 2010, 9, 12, 12, 0, 0);
		severityLevel6.setDate(severity6);
		severityLevel6.setSeverityLevel(60);;
		concernTest3.addSeverity(severityLevel6);
		
		//-----------------------------------------------------------------
		//LdvDocument
		//-----------------------------------------------------------------
		LdvModelDocument document = new LdvModelDocument() ;
		document.setTitle("Document1") ;
		LdvTime documentTime1 = new LdvTime(0, 1970, 9, 12, 12, 0, 0);
		document.setBeginDate(documentTime1) ;
		document.setLineID("concernline1") ;
				
		modelProject1.addConcern(concernTest1);
		modelProject1.addConcern(concernTest2);
		modelProject1.addConcern(concernTest3);
		modelProject1.addDocument(document) ;
		
		projectsModelsList.add(modelProject1); 
		
		// If LoginSuccessEvent is not handled yet, we have to defer fireEvent
		//
		if (false == eventBus.isEventHandled(LdvMainSentEvent.TYPE))
		{
			if (null == _pendingEvents) 
			{
				_pendingEvents = new ScheduledCommand() 
				{
	        public void execute() {
	        	_pendingEvents = null ;
	        	eventBus.fireEvent(new LdvMainSentEvent(display.getWorkspace(), projectsModelsList)) ;
	        }
	      };
	      Scheduler.get().scheduleDeferred(_pendingEvents) ;
	    }
		}
		else
			eventBus.fireEvent(new LdvMainSentEvent(display.getWorkspace(), projectsModelsList)) ;	
	}
	
	public void goToRegisterPage()
	{
		Log.info("Going to register page") ;
		display.getWorkspace().clear() ;
		if ((false == _isRegisterPageCreated) && (null != _supervisor) && (null != _supervisor.getInjector()))
		{
			LdvGinjector injector = _supervisor.getInjector() ;
			injector.getRegisterPresenter() ;
			_isRegisterPageCreated = true ;
		}

		// If LoginSuccessEvent is not handled yet, we have to defer fireEvent
		//
		if (false == eventBus.isEventHandled(LdvRegisterSentEvent.TYPE))
		{
			if (null == _pendingEvents) 
			{
				_pendingEvents = new ScheduledCommand() 
				{
	        public void execute() {
	        	_pendingEvents = null ;
	        	eventBus.fireEvent(new LdvRegisterSentEvent(display.getWorkspace())) ;
	        }
	      };
	      Scheduler.get().scheduleDeferred(_pendingEvents) ;
	    }
		}
		else
			eventBus.fireEvent(new LdvRegisterSentEvent(display.getWorkspace())) ;	
	}
	
	public void goToValidatingPage(final String sFutureId)
	{
		if ((null == sFutureId) || sFutureId.equals(""))
			return ;
		
		Log.info("Going to validating page") ;
		display.getWorkspace().clear() ;
		if ((false == _isValidatingPageCreated) && (null != _supervisor) && (null != _supervisor.getInjector()))
		{
			LdvGinjector injector = _supervisor.getInjector() ;
			injector.getValidatorPresenter() ;
			_isValidatingPageCreated = true ;
		}

		// If LoginSuccessEvent is not handled yet, we have to defer fireEvent
		//
		if (false == eventBus.isEventHandled(LdvValidatorSentEvent.TYPE))
		{
			if (null == _pendingEvents) 
			{
				_pendingEvents = new ScheduledCommand() 
				{
	        public void execute() {
	        	_pendingEvents = null ;
	        	eventBus.fireEvent(new LdvValidatorSentEvent(display.getWorkspace(), sFutureId)) ;
	        }
	      };
	      Scheduler.get().scheduleDeferred(_pendingEvents) ;
	    }
		}
		else
			eventBus.fireEvent(new LdvValidatorSentEvent(display.getWorkspace(), sFutureId)) ;	
	}

	@Override
	protected void onUnbind() {
	}

	public void refreshDisplay() {	
	}

	public void revealDisplay() {
	}
		
	@Override
	public Place getPlace() {
		return PLACE;
	}

	protected void onPlaceRequest(final PlaceRequest request) {	
	}
}

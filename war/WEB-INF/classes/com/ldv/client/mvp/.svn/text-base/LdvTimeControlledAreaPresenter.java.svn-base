package com.ldv.client.mvp;

import java.util.ArrayList;
import java.util.Iterator;

import com.allen_sauer.gwt.log.client.Log;
import com.google.gwt.core.client.Scheduler;
import com.google.gwt.core.client.Scheduler.ScheduledCommand;
import com.google.gwt.dom.client.Element;
import com.google.gwt.dom.client.Style;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.DragOverEvent;
import com.google.gwt.event.dom.client.DragOverHandler;
import com.google.gwt.event.dom.client.DragStartEvent;
import com.google.gwt.event.dom.client.DragStartHandler;
import com.google.gwt.event.dom.client.DropEvent;
import com.google.gwt.event.dom.client.DropHandler;
import com.google.gwt.event.dom.client.HasClickHandlers;
import com.google.gwt.event.dom.client.HasMouseDownHandlers;
import com.google.gwt.event.dom.client.HasMouseUpHandlers;
import com.google.gwt.event.dom.client.MouseDownEvent;
import com.google.gwt.event.dom.client.MouseDownHandler;
import com.google.gwt.event.dom.client.MouseMoveEvent;
import com.google.gwt.event.dom.client.MouseMoveHandler;
import com.google.gwt.event.dom.client.MouseUpEvent;
import com.google.gwt.event.dom.client.MouseUpHandler;
import com.google.gwt.user.client.Timer;
import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.FocusPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.inject.Inject;
import com.ldv.shared.model.LdvTime;
import com.ldv.client.canvas.LdvScrollArea;
import com.ldv.client.canvas.LdvTimeController;
import com.ldv.client.event.LdvMainSentEvent;
import com.ldv.client.event.LdvMainSentEventHandler;
import com.ldv.client.event.LdvProjectInitEvent;
import com.ldv.client.event.LdvRedrawProjectWindowEvent;
import com.ldv.client.gin.LdvGinjector;
import com.ldv.client.model.LdvModelConcern;
import com.ldv.client.model.LdvModelProject;
import com.ldv.client.util.LdvSupervisor;
import com.ldv.client.util.LdvTimeZoomLevel;
import com.ldv.client.util.LdvTimeZoomLevel.pixUnit;

import net.customware.gwt.presenter.client.EventBus;
import net.customware.gwt.presenter.client.place.Place;
import net.customware.gwt.presenter.client.place.PlaceRequest;
import net.customware.gwt.presenter.client.widget.WidgetDisplay;
import net.customware.gwt.presenter.client.widget.WidgetPresenter;

public class LdvTimeControlledAreaPresenter extends WidgetPresenter<LdvTimeControlledAreaPresenter.Display>{

	private LdvTime          _topRightTime ;
	private LdvTimeZoomLevel _currentZoomLevel ;
	private pixUnit          _iPixUnit ;

	private LdvTime 				 _minTime ;
	private LdvTime					 _maxTime ;
	private LdvTime					 _minScrollTime ;
	private LdvTime 				 _maxScrollTime ;
	
	private ArrayList<LdvModelProject>           _projectsModels ;
	private ArrayList<LdvProjectWindowPresenter> _projects ;
	private LdvProjectWindowPresenter _currentProject ;
	
	private final LdvSupervisor _supervisor ;
	private Timer timer ;
	private int _startThumbDragRelativeX ;
	private boolean _onThumbDrag = false ;
	private String _colorOnMove = "#FFFF99" ;
	private String _colorOrigin = "#FFFFF0" ;
	
	private ScheduledCommand _pendingEvents = null ;
		
	public interface Display extends WidgetDisplay 
	{	
		public AbsolutePanel        getMainPanel();	
		public HasClickHandlers     getRightButton();
		public HasClickHandlers     getLeftButton();
		public HasMouseDownHandlers getRightButtonMouseDown();
		public HasMouseUpHandlers   getRightButtonMouseUp();
		public HasMouseDownHandlers getLeftButtonMouseDown();
		public HasMouseUpHandlers   getLeftButtonMouseUp();
		public LdvTime              getTopRightTime();
		public LdvTimeZoomLevel     getCurrentZoomLevel();
		public void             		setTopRightTime(LdvTime topRightTime);
		public void             		setCurrentZoomLevel(LdvTimeZoomLevel currentZoomLevel);
		public void             		refresh(LdvTime topRightTime, LdvTimeZoomLevel currentZoomLevel);
		public long									getInternalPhysicalPosition(LdvTime ldvTime);
		public LdvTimeController 		getTimeController() ;
		public LdvScrollArea 				getScrollArea() ;
		public FocusPanel 				  getThumb() ;
		public int 									getAreaWidth() ;
		//public int 									getScrollAreaWidth() ;
	} 

	public static final Place PLACE = new Place("Time Controler") ;
		
	@Inject
	public LdvTimeControlledAreaPresenter(final Display display, 
			                                  final EventBus eventBus,
			                                  final LdvSupervisor supervisor) 
	{	
		super(display, eventBus) ;
		
		_supervisor = supervisor ;
		
		_currentZoomLevel = new LdvTimeZoomLevel(pixUnit.pixMonth,0,0,0);
		_topRightTime = new LdvTime(0);
		_topRightTime.takeTime() ;
		
		display.setTopRightTime(_topRightTime);
		display.setCurrentZoomLevel(_currentZoomLevel);
		
		_projects = new ArrayList<LdvProjectWindowPresenter>() ;
		
		bind();
		
		Log.info("entering constructor of LdvTimeControlledAreaPresenter.");
	}

	@Override
	protected void onBind() {
		
		display.getRightButton().addClickHandler(new ClickHandler(){
			public void onClick(final ClickEvent event){
				doRight();
				display.getScrollArea().moveThumb(1);
				for(Iterator<LdvProjectWindowPresenter> iter= _projects.iterator();iter.hasNext();){
					LdvProjectWindowPresenter project = iter.next() ;
					eventBus.fireEvent(new LdvRedrawProjectWindowEvent(project)) ;
				}			
			}
		});
		
		display.getRightButtonMouseDown().addMouseDownHandler(new MouseDownHandler(){
			public void onMouseDown(final MouseDownEvent event){
				timer = new Timer(){
					public void run(){
						doRight();
						display.getScrollArea().moveThumb(1);
						for(Iterator<LdvProjectWindowPresenter> iter= _projects.iterator();iter.hasNext();){
							LdvProjectWindowPresenter project = iter.next() ;
							eventBus.fireEvent(new LdvRedrawProjectWindowEvent(project)) ;
						}			
					}
				};
				timer.scheduleRepeating(20) ;
			}
		}); 
		
		display.getRightButtonMouseUp().addMouseUpHandler(new MouseUpHandler(){
			public void onMouseUp(final MouseUpEvent event){
				timer.cancel();
			}
		});
		
		display.getLeftButton().addClickHandler(new ClickHandler(){
			public void onClick(final ClickEvent event){
				doLeft();
				display.getScrollArea().moveThumb(-1);
				for(Iterator<LdvProjectWindowPresenter> iter= _projects.iterator();iter.hasNext();){
					LdvProjectWindowPresenter project = iter.next() ;
					eventBus.fireEvent(new LdvRedrawProjectWindowEvent(project)) ;
				}
			}
		});
		
		display.getLeftButtonMouseDown().addMouseDownHandler(new MouseDownHandler(){
			public void onMouseDown(final MouseDownEvent event){
				timer = new Timer(){
					public void run(){
						doLeft();
						display.getScrollArea().moveThumb(-1);
						for(Iterator<LdvProjectWindowPresenter> iter= _projects.iterator();iter.hasNext();){
							LdvProjectWindowPresenter project = iter.next() ;
							eventBus.fireEvent(new LdvRedrawProjectWindowEvent(project)) ;
						}			
					}
				};
				timer.scheduleRepeating(20) ;
			}
		}); 
		
		display.getLeftButtonMouseUp().addMouseUpHandler(new MouseUpHandler(){
			public void onMouseUp(final MouseUpEvent event){
				timer.cancel();
			}
		});

		
		display.getThumb().addMouseDownHandler(new MouseDownHandler()
		{			
			@Override
			public void onMouseDown(MouseDownEvent event)
			{
				_onThumbDrag = true ;
				_startThumbDragRelativeX = event.getRelativeX(display.getThumb().getElement()) ;				
			}
		});
		
		display.getThumb().addMouseMoveHandler(new MouseMoveHandler()
		{		
			@Override
			public void onMouseMove(MouseMoveEvent event)
			{
				if(_onThumbDrag){
					
					display.getThumb().getElement().getStyle().setBackgroundColor(_colorOnMove) ;
					
					int relativeX = event.getRelativeX(display.getThumb().getElement()) ;
					int distance = relativeX - _startThumbDragRelativeX ;
/*					
					String edge = "0px";
					if(display.getThumb().getElement().getStyle().getLeft().equals(edge)){
					
					}else if(display.getThumb().getElement().getStyle().getRight().equals(edge)){
												
					}else{
						display.getScrollArea().moveThumb(distance) ;
					}
*/					
					display.getScrollArea().moveThumb(distance) ;
					
					if(distance>0){
						doRight();
						for(Iterator<LdvProjectWindowPresenter> iter= _projects.iterator();iter.hasNext();){
							LdvProjectWindowPresenter project = iter.next() ;
							eventBus.fireEvent(new LdvRedrawProjectWindowEvent(project)) ;
						}			
					}else{
						doLeft();
						for(Iterator<LdvProjectWindowPresenter> iter= _projects.iterator();iter.hasNext();){
							LdvProjectWindowPresenter project = iter.next() ;
							eventBus.fireEvent(new LdvRedrawProjectWindowEvent(project)) ;
						}			
					}
				}				
			}
		});
		
		display.getThumb().addMouseUpHandler(new MouseUpHandler()
		{
			@Override
			public void onMouseUp(MouseUpEvent event)
			{
				_onThumbDrag = false ;
				display.getThumb().getElement().getStyle().setBackgroundColor(_colorOrigin) ;
			}
		});
		
		eventBus.addHandler(LdvMainSentEvent.TYPE, new LdvMainSentEventHandler() 
		{
			@Override
			public void onMainSend(LdvMainSentEvent event) 
			{
				Log.info("Handling RegisterSent event");
				event.getWorkspace().clear();
				 
				_projectsModels = event.getProjectsModels() ;
						
				FlowPanel workspace = (FlowPanel) event.getWorkspace() ;
				workspace.add(getDisplay().asWidget()) ;
				
				if (_projects.isEmpty() && (false == _projectsModels.isEmpty()))
				{
					 for (Iterator<LdvModelProject> iter = _projectsModels.iterator(); iter.hasNext();) 
					 {
						 	LdvModelProject projectModel = iter.next() ;
						 	
						 	LdvGinjector injector = _supervisor.getInjector() ;
						 	LdvProjectWindowPresenter projectPresenter = injector.getProjectWindowPresenter() ;
					
						 	_projects.add(projectPresenter) ;
						 	initProject(projectPresenter, projectModel) ;
					 }
				}
				
				//set the first project as the current project
				_projects.get(0).setIsCurrentProject(true) ;
				setCurrentProject() ;
				
				resetTimeController() ;
			}
		});
				
	}
	
	public void initProject(final LdvProjectWindowPresenter projectPresenter, final LdvModelProject projectModel)
	{
		if (null == projectPresenter)
			return ;
		
		// If LdvProjectInitEvent is not handled yet, we have to defer fireEvent
		//
		if (false == eventBus.isEventHandled(LdvProjectInitEvent.TYPE))
		{
			_pendingEvents = new ScheduledCommand() 
				{
					public void execute() {
						_pendingEvents = null ;
						initProject(projectPresenter, projectModel) ;
		      }
				};
		  Scheduler.get().scheduleDeferred(_pendingEvents) ;
		}
		else
		{	
			eventBus.fireEvent(new LdvProjectInitEvent(display.getMainPanel(), projectPresenter, this, projectModel)) ;
		}
	}
	
	public void resetTimeController(){
		
		_minTime = this.getProjectsMinTime(_projectsModels) ;
		_maxTime = this.getProjectsMaxTime(_projectsModels) ;
		
		_minScrollTime = _minTime ;
		
		if(_maxTime.isAfter(_topRightTime)){
			resetTopRightTime(_topRightTime) ;  //_topRightTime has been changed by this method
		}
				
		if(_maxTime.isAfter(_topRightTime)){
			_maxScrollTime = _maxTime ;
		}else{
			_maxScrollTime = _topRightTime ;
		}

		display.getTimeController().refresh(_topRightTime, _currentZoomLevel) ;		
	}
	
	public void resetTopRightTime(LdvTime todayTime){
		
		display.setTopRightTime(todayTime) ;
		//int areaWidth = display.getAreaWidth() ;
		int oneForthWidth = display.getAreaWidth() / 4 ;
		int deltaWidth = display.getTimeController().getTimeUnitFromPhysicalWidth(oneForthWidth) ;
		this.shiftProjectStep(deltaWidth) ;				
		
	}
	
	public void resetThumb(){
		
			setThumbWidth(_currentProject) ;		
			setThumbPosition(_currentProject) ;					

	}
	
	private void setThumbPosition(LdvProjectWindowPresenter project){
				
		int currentProjectBeginPositionFromRight = getProjectBeginPositionFromRight(project) ;
		
		int scrollAreaWidth = display.getScrollArea().getOffsetWidth() ;		
		double scrollAreaIntervalInDay = _maxScrollTime.deltaDays(_minScrollTime) ;
		double scrollAreaInterval = transformInterval(scrollAreaIntervalInDay) ;
		
		LdvTime projectBeginTime = this.getLdvTimeFromPosition(currentProjectBeginPositionFromRight) ;
		int timeUnitOfScrollArea = (int) (scrollAreaInterval / scrollAreaWidth) ;
		double frontScrollAreaIntervalInDay = projectBeginTime.deltaDays(_minScrollTime) ; 
		double frontScrollAreaInterval = transformInterval(frontScrollAreaIntervalInDay) ;
		int thumbPosition = (int) (frontScrollAreaInterval / timeUnitOfScrollArea) ;
		
		display.getThumb().getElement().getStyle().setLeft(thumbPosition, Style.Unit.PX) ;
	}
	
	private void setThumbWidth(LdvProjectWindowPresenter project){
		
		setProjectWidthRatio(project) ;
		
		int scrollAreaWidth = display.getScrollArea().getOffsetWidth() ;
		
		int thumbWidth = (int) (project.getProjectScrollAreaWidthRatio() * scrollAreaWidth) ;
		String width_String = Integer.toString(thumbWidth) + "px" ;
		
		display.getScrollArea().setThumbWidth(thumbWidth) ;
		display.getThumb().setWidth(width_String) ;	
	}
	
	private void setProjectWidthRatio(LdvProjectWindowPresenter project){
		
		int projectWidth = project.getDisplay().getMainPanel().getOffsetWidth() ;
		double projectInterval = display.getTimeController().getTimeUnitFromPhysicalWidth(projectWidth) ;
		double scrollAreaIntervalInDay = _maxScrollTime.deltaDays(_minScrollTime) ;
		double scrollAreaInterval = transformInterval(scrollAreaIntervalInDay) ;
		
		double ratio = projectInterval / scrollAreaInterval ;
		if(ratio > 1){
			ratio = 1 ;
		}
		
		project.setProjectScrollAreaWidthRatio(ratio) ;				
	}
	
	public int getProjectBeginPositionFromRight(LdvProjectWindowPresenter project){
		
		 int projectBeginPositionFromLeft = project.getDisplay().getMainPanel().getAbsoluteLeft() ;
		 int controlledAreaWidth = display.getAreaWidth() ;
		 return (controlledAreaWidth - projectBeginPositionFromLeft) ;	
	}
	
	public double transformInterval(double intervalInDay){
		
		double result ;
		switch (_currentZoomLevel.getPixUnit()) {
		case pixDay :
			result = intervalInDay ;
			break;
		case pixWeek :
			result = intervalInDay / 7 ;
			break;
		case pixMonth :
			result = intervalInDay / 30 ;
			break;
		default :
			result = 0 ;
			break;
		}				
		return result ;
	}
	
	public void doRight()
	{	
		Log.info("Calling doRight");
		_topRightTime = display.getTopRightTime();
		_currentZoomLevel = display.getCurrentZoomLevel();
		shiftStep(1);
		display.setTopRightTime(_topRightTime);
		display.refresh(_topRightTime, _currentZoomLevel);				
	}
	
	public void doLeft()
	{	
		Log.info("Calling doLeft");
		_topRightTime = display.getTopRightTime();
		_currentZoomLevel = display.getCurrentZoomLevel();
		shiftStep(-1);
		display.setTopRightTime(_topRightTime);
		display.refresh(_topRightTime, _currentZoomLevel) ;		
	}
	    
	/**
	 * Shift to the past (negative value) or the future (positive value)
	 * 
	 * @param numSteps the number of steps to shift (positive for future, negative for past
	 */
	public void shiftStep(int numSteps) {
		switch (_currentZoomLevel.getPixUnit()) {
			case pixSecond :
				_topRightTime.addMinutes(numSteps, true) ;
				break;
			case pixMinute :
				_topRightTime.addHours(numSteps, true) ;
				break;
			case pixHour :
				_topRightTime.addDays(numSteps, true) ;
				break;
			case pixDay :
				_topRightTime.addMonths(numSteps, true) ;
				break;
			case pixWeek :
			case pixMonth :
				_topRightTime.addYears(numSteps, true) ;
				break;
		}
	}
	
	/**
	 *  Shift the step of the Window of the Project
	 */
	public void shiftProjectStep(int numSteps) {
		switch (_currentZoomLevel.getPixUnit()) {
			case pixSecond :
				_topRightTime.addSeconds(numSteps, true) ;
				break;
			case pixMinute :
				_topRightTime.addMinutes(numSteps, true) ;
				break;
			case pixHour :
				_topRightTime.addHours(numSteps, true) ;
				break;
			case pixDay :
				_topRightTime.addDays(numSteps, true) ;
				break;
			case pixWeek :
			case pixMonth :
				_topRightTime.addMonths(numSteps, true) ;
				break;
		}
	}
	
	public LdvTime getProjectsMinTime(ArrayList<LdvModelProject> projectsModelsArray){
		
		LdvTime minTime = new LdvTime(0) ;
		minTime.setNoLimit() ;	
		ArrayList<LdvModelConcern> concernModelArray ;
		
		for(Iterator<LdvModelProject> iter = projectsModelsArray.iterator(); iter.hasNext();){
			LdvModelProject modelProject = iter.next() ;
			concernModelArray = modelProject.getConcerns() ;
			
			LdvTime beginDate = getLinesMinTime(concernModelArray) ;
			
			if(beginDate.isBefore(minTime)){
				minTime.initFromLdvTime(beginDate) ;
			}
		}
		
		return minTime;
	}
	
	public LdvTime getProjectsMaxTime(ArrayList<LdvModelProject> projectsModelsArray){
		
		LdvTime maxTime = new LdvTime(0) ;
		ArrayList<LdvModelConcern> concernModelArray ;
		
		for(Iterator<LdvModelProject> iter = projectsModelsArray.iterator(); iter.hasNext();){
			LdvModelProject modelProject = iter.next() ;
			concernModelArray = modelProject.getConcerns() ;
			
			LdvTime endDate = getLinesMaxTime(concernModelArray) ;
			
			if(endDate.isAfter(maxTime)){
				maxTime.initFromLdvTime(endDate) ;
			}
		}
		
		return maxTime;
	}
	
	public LdvTime getLinesMinTime(ArrayList<LdvModelConcern> concernModelArray){
		
		LdvTime minTime = new LdvTime(0) ;
		minTime.setNoLimit() ;		
		
		for(Iterator<LdvModelConcern> iter = concernModelArray.iterator(); iter.hasNext();){
			LdvModelConcern concernModel = iter.next() ;
			LdvTime beginDate = concernModel.getBeginDate() ;
			if(beginDate.isBefore(minTime)){
				minTime.initFromLdvTime(beginDate) ;
			}
		}
		
		return minTime ;		 
	}
	
	public LdvTime getLinesMaxTime(ArrayList<LdvModelConcern> concernModelArray){
		
		LdvTime maxTime = new LdvTime(0);
		
		for(Iterator<LdvModelConcern> iter = concernModelArray.iterator(); iter.hasNext();){
			LdvModelConcern concernModel = iter.next() ;
			LdvTime endDate = concernModel.getEndDate() ;
			
			if(endDate.isNoLimit()){
				endDate = concernModel.getBeginDate() ;
			}
			
			if(endDate.isAfter(maxTime)){
				maxTime.initFromLdvTime(endDate) ;
			}
		}
		
		return maxTime ;		 
	}
	
	/**
	 * get the LdvTime from the position
	 * 
	 * @param position
	 * @return LdvTime of this position
	 */
	public LdvTime getLdvTimeFromPosition(int positionFromSpaceRightEdge){
		
		LdvTime result = new LdvTime(0) ;
		result.initFromLdvTime(_topRightTime) ;
		int TimeWidgetleftEdgePosition = display.getTimeController().getAbsoluteLeft() ;
		
		int interval = positionFromSpaceRightEdge - TimeWidgetleftEdgePosition ;
		int timeUnit = - display.getTimeController().getTimeUnitFromPhysicalWidth(interval) ;
		
		switch (_currentZoomLevel.getPixUnit()) {
		case pixSecond :
			result.addSeconds(timeUnit, true) ;
			break;
		case pixMinute :
			result.addMinutes(timeUnit, true) ;
			break;
		case pixHour :
			result.addHours(timeUnit, true) ;
			break;
		case pixDay :
			result.addDays(timeUnit, true) ;
			break;
		case pixWeek :
		case pixMonth :
			result.addMonths(timeUnit, true) ;
			break;
		case pixYear :
			result.addYears(timeUnit, true) ;
			break;
		}
		
		return result ;		
	}
	
	private void setCurrentProject(){
		for(Iterator<LdvProjectWindowPresenter> iter = _projects.iterator(); iter.hasNext();){
			LdvProjectWindowPresenter project = iter.next() ;
			if(project.getIsCurrentProject() == true){
				this._currentProject = project ;
				return ;
			}
		}
	}
	
	public pixUnit getPixUnit() {
		return _iPixUnit ;
	}
	
	@Override
	public Place getPlace() {
		return PLACE ;
	}

	@Override
	protected void onPlaceRequest(PlaceRequest request) {
		
	}

	@Override
	protected void onUnbind() {
		
	}

	@Override
	public void refreshDisplay() {
		
	}

	@Override
	public void revealDisplay() {
		
	}

}

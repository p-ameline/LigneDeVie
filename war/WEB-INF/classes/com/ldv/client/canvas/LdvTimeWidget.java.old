package com.ldv.client.canvas;

import java.util.ArrayList;
import java.util.List;

import com.allen_sauer.gwt.log.client.Log;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.widgetideas.client.ResizableWidget;
import com.google.gwt.widgetideas.client.ResizableWidgetCollection;
import com.ldv.client.util.LdvTimeZoomLevel;
import com.ldv.client.util.LdvTimeZoomLevel.pixUnit;
import com.ldv.shared.model.LdvInt;
import com.ldv.shared.model.LdvTime;

// public class LdvTimeWidget extends FlowPanel implements ResizableWidget
public class LdvTimeWidget extends AbsolutePanel implements ResizableWidget
{
	private LdvTime          _topRightTime ;
	private LdvTimeZoomLevel _currentZoomLevel ;
	
	/**
	 * The area where chrono steps are drawn.
	 */
	private Element _chronoStepsElement ;
	
	/**
	 * The area where chrono contexts are drawn.
	 */
	private Element _chronoContextElement ;
	
	/**
	 * The elements used to display steps marks
	 */
	private List<Element> _stepBoxElements      = new ArrayList<Element>() ;
	private List<Element> _stepLabelElements    = new ArrayList<Element>() ;
	private List<Element> _contextLabelElements = new ArrayList<Element>() ;
	
	public LdvTimeWidget(LdvTime topRightTime, LdvTimeZoomLevel currentZoomLevel)
	{
		super() ;
		
		this._topRightTime = topRightTime ;
		this._currentZoomLevel = currentZoomLevel ;
		
		// Create the outer shell
		//
		// DOM.setStyleAttribute(getElement(), "position", "relative") ;
		// DOM.setStyleAttribute(getElement(), "position", "absolute") ;
		setStyleName("ldv-TimeControl-shell") ;
		
		// Create chrono steps area
		//
		_chronoStepsElement = DOM.createDiv();
		DOM.appendChild(getElement(), _chronoStepsElement) ;
		DOM.setStyleAttribute(_chronoStepsElement, "position", "relative") ;	    
		DOM.setElementProperty(_chronoStepsElement, "className", "ldv-TimeControl-stepsArea") ;
		DOM.setStyleAttribute(_chronoStepsElement, "overflow", "hidden") ;
	    
		// Create chrono contexts area
		_chronoContextElement = DOM.createDiv() ;
		DOM.appendChild(getElement(), _chronoContextElement) ;
		DOM.setStyleAttribute(_chronoContextElement, "position", "relative") ;
		DOM.setElementProperty(_chronoContextElement, "className", "ldv-TimeControl-contextsArea");
		DOM.setStyleAttribute(_chronoContextElement, "overflow", "hidden") ;
	}
	
	/**
	 * This method is called immediately after a widget becomes attached to the
	 * browser's document.
	 */
	@Override
	protected void onLoad() 
	{
		// Reset the position attribute of the parent element
		// DOM.setStyleAttribute(getElement(), "position", "relative") ;
		ResizableWidgetCollection.get().add(this) ;
		redraw() ;
	}

	@Override
	protected void onUnload() {
		ResizableWidgetCollection.get().remove(this);
	}
	
	/**
	 * Redraw the progress bar when something changes the layout.
	 */
	public void redraw() 
	{
		if (isAttached()) 
		{
			int width  = DOM.getElementPropertyInt(getElement(), "clientWidth") ;
			int height = DOM.getElementPropertyInt(getElement(), "clientHeight") ;
			onResize(width, height) ;
		}
	}
	
	/**
	  * This method is called when the dimensions of the parent element change.
	  * Subclasses should override this method as needed.
	  * 
	  * @param width the new client width of the element
	  * @param height the new client height of the element
	  */
	public void onResize(int width, int height) 
	{  
	  // Draw the other components
		drawTimeElements() ;
	}
	
	public void setTopRightTime(LdvTime topRightTime){
		_topRightTime = topRightTime ;
	}
	
	public void setCurrentZoomLevel(LdvTimeZoomLevel currentZoomLevel){
		_currentZoomLevel = currentZoomLevel ;
	}
		
	public int getPhysicalWidthFromTimeUnit(int iTimeUnitCount) 
	{ 
		return (_currentZoomLevel.getUppRate() == 0) ? iTimeUnitCount : iTimeUnitCount * (_currentZoomLevel.getUpperLimit() - _currentZoomLevel.getUppRate()) / _currentZoomLevel.getUpperLimit() ; 
	}
	
	public int getTimeUnitFromPhysicalWidth(int iPhysicalWidth)
	{ 
		return (_currentZoomLevel.getUppRate() == 0) ? iPhysicalWidth : iPhysicalWidth * _currentZoomLevel.getUpperLimit() / (_currentZoomLevel.getUpperLimit() - _currentZoomLevel.getUppRate()) ; 
	}
	
	/**
	 * Get the difference in pixels between 2 dates
	 * 
	 * The result is positive if ldvOtherTime > ldvRefTime and negative elsewhere
	 */
	public long getPhysicalDistance(LdvTime ldvRefTime, LdvTime ldvOtherTime)
	{
		//
		// Differences for each column.
		//
		int iDeltaYear  = ldvOtherTime.getFullYear()  - ldvRefTime.getFullYear() ;
		int iDeltaMonth = ldvOtherTime.getMonth() - ldvRefTime.getMonth() ;

		if (_currentZoomLevel.getPixUnit() == pixUnit.pixYear)
		{
			int iDelta = iDeltaYear ;
			if      (iDeltaMonth > 6)
				iDelta++ ;
			else if (iDeltaMonth < -6)
				iDelta-- ;
			return iDelta ;
		}

		int iDeltaDays = ldvOtherTime.getDate() - ldvRefTime.getDate() ;

		if (_currentZoomLevel.getPixUnit() == pixUnit.pixMonth)
		{
			int iDelta = iDeltaYear * 12 + iDeltaMonth ;
			if      (iDeltaDays > 15)
				iDelta++ ;
			else if (iDeltaDays < -15)
				iDelta-- ;
			return iDelta ;
		}

		//
		// At least a daily precision
		//
		long lDeltaJ = ldvOtherTime.deltaDays(ldvRefTime);
	        
		if (_currentZoomLevel.getPixUnit() == pixUnit.pixWeek)
		{
			double dDelta = (double) lDeltaJ / 7 ;
			double dFloor = Math.floor(dDelta) ;
			if ((dDelta - dFloor) > 0.5)
				dFloor++ ;
			return (long) dFloor ;
		}

		int iDeltaHours = ldvOtherTime.getHours() - ldvRefTime.getHours();

		if (_currentZoomLevel.getPixUnit() == pixUnit.pixDay)
		{
			if (iDeltaHours > 12)
				return(lDeltaJ++) ;
			if (iDeltaHours < -12)
				return(lDeltaJ--) ;
			return(lDeltaJ) ;
		}

		int iDeltaMinutes = ldvOtherTime.getMinutes() - ldvRefTime.getMinutes() ;

		long lDeltaH = (lDeltaJ * 24) + iDeltaHours ;

		if (_currentZoomLevel.getPixUnit() == pixUnit.pixHour)
		{
			if (iDeltaMinutes > 30)
				return(lDeltaH++) ;
			if (iDeltaMinutes < -30)
				return(lDeltaH--) ;
			return(lDeltaH) ;
		}

		int iDeltaSeconds = ldvOtherTime.getSeconds() - ldvRefTime.getSeconds() ;

		long lDeltaM = (lDeltaH * 60) + iDeltaMinutes ;

		if (_currentZoomLevel.getPixUnit() == pixUnit.pixMinute)
		{
			if (iDeltaSeconds > 30)
				return(lDeltaM++) ;
			if (iDeltaSeconds < -30)
				return(lDeltaM--) ;
			return(lDeltaM) ;
		}

		long lDeltaS = (lDeltaM * 60) + iDeltaSeconds ;

		if (_currentZoomLevel.getPixUnit() == pixUnit.pixSecond)
			return(lDeltaS) ;

		return 0 ;
	}
	
	/**
	 * Get the position of a date, in pixel, relative to upper right corner
	 * 
	 * The result is positive if ldvTime > _topRightTime and negative elsewhere
	 * 
	 * Contrary to getPhysicalDistance, this function uses the compression factor (getUppRate)
	 */
	public int getRelativePhysicalPosition(LdvTime ldvTime)
	{	
		if (ldvTime.isNoLimit())
			return Integer.MAX_VALUE ;
		
		long lDeltaPix = getPhysicalDistance(_topRightTime, ldvTime) ;
		
		if (_currentZoomLevel.getUppRate() != 0)
			lDeltaPix = lDeltaPix * (_currentZoomLevel.getUpperLimit() - _currentZoomLevel.getUppRate()) / _currentZoomLevel.getUpperLimit() ; 
		
		return (int) lDeltaPix ;
	}
	
	/**
	 * Get the left position of a date, in pixel, inside the Element 
	 * 
	 * If the date is inside the Element, the value should range between 0 and offsetWidth
	 */
	public int getInternalPhysicalPosition(LdvTime ldvTime)
	{			
		if (ldvTime.isNoLimit())
			return Integer.MAX_VALUE ;
		
		int elementWidth = DOM.getElementPropertyInt(getElement(), "offsetWidth");
		int iRelativePos = getRelativePhysicalPosition(ldvTime) ;

		return elementWidth + iRelativePos ;		
	}

	/**
	 * Draw the alternating black and red numbered boxes that "pave" time
	 * 
	 * Take care that all boxes are not necessarily of equal width. For example, a month can be made of 28, 29, 30 or 31 days 
	 * 
	 * @param iStepIndex Step number (from right to left)
	 * @param left Time for step's left border
	 * @param left Time for step's right border
	 * @param sText Step's text
	 * @param bRed Is this step a red (or black) one
	 * 
	 */
	public void drawChronoStep(int iStepIndex, LdvTime left, LdvTime right, String sText, boolean bRed)
	{
		int iLeftMargin = DOM.getElementPropertyInt(_chronoStepsElement, "left") ;
		
		// position are converted from time to pixel
		//
		
		Log.info("drawChronoStep - converting from time positions to pixels") ;
		
		int iLeftPosition  = (int) getInternalPhysicalPosition(left) - iLeftMargin ;
		int iRightPosition = (int) getInternalPhysicalPosition(right) - iLeftMargin ;
	    
		if (iRightPosition <= iLeftPosition)
			return ;
	    
		int iBlockWidth = iRightPosition - iLeftPosition ;
	    
		// Create the box or make it visible	    
		Element box = null ;
		boolean bBoxIsNew ;
		if (iStepIndex < _stepBoxElements.size()) 
		{
			box = _stepBoxElements.get(iStepIndex) ;
			bBoxIsNew = false ;
		} 
		else 
		{ // Create the new box
			
			Log.info("drawChronoStep - creating Div") ;
			
			box = DOM.createDiv() ;
			bBoxIsNew = true ;
			
			DOM.setStyleAttribute(box, "position", "absolute") ;
			DOM.setStyleAttribute(box, "display", "none") ;
			if (bRed)
				DOM.setElementProperty(box, "className", "ldv-stepcolor-box-red") ;
			else
				DOM.setElementProperty(box, "className", "ldv-stepcolor-box-black") ;
			DOM.appendChild(_chronoStepsElement, box) ;
			_stepBoxElements.add(box) ;
		}

		// Position the box and make it visible
		if (bBoxIsNew)
		{
			DOM.setStyleAttribute(box, "visibility", "hidden");
			DOM.setStyleAttribute(box, "display", "");
		}
     
		// Don't do it for new labels only because of pixUnit change
		//
		
		Log.info("drawChronoStep - setting style attributes") ;
		
		DOM.setStyleAttribute(box, "left", iLeftPosition + "px") ;
		DOM.setStyleAttribute(box, "width", iBlockWidth + "px") ;
		if (bBoxIsNew)
			DOM.setStyleAttribute(box, "visibility", "visible") ;
	  
		Log.info("drawChronoStep - inserting text") ;
		
		DOM.setElementProperty(box, "innerHTML", sText) ;
		
		Log.info("drawChronoStep - done") ;
		
		// Create the label or make it visible
/*
		Element label = null ;
		boolean bLabelIsNew ;
		if (iStepIndex < _stepLabelElements.size()) 
		{
			label = _stepLabelElements.get(iStepIndex) ;
			bLabelIsNew = false ;
		} 
		else 
		{ // Create the new label
			label = DOM.createDiv() ;
			bLabelIsNew = true ;
			
			DOM.setStyleAttribute(label, "position", "absolute") ;
			DOM.setStyleAttribute(label, "display", "none") ;
			if (bRed)
				DOM.setElementProperty(label, "className", "ldv-stepcolor-label-red") ;
			else
				DOM.setElementProperty(label, "className", "ldv-stepcolor-label-black") ;
			DOM.appendChild(_chronoStepsElement, label) ;
			_stepLabelElements.add(label) ;
		}

		// Set the label text
		if (bLabelIsNew)
		{
			DOM.setStyleAttribute(label, "visibility", "hidden");
			DOM.setStyleAttribute(label, "display", "");
		}

		DOM.setElementProperty(label, "innerHTML", sText);
		
		// Position the label and make it visible
		// Don't do it for new labels only because of pixUnit change
		//
		DOM.setStyleAttribute(label, "left", iLeftPosition + "px") ;
		DOM.setStyleAttribute(label, "width", iBlockWidth + "px") ;
		DOM.setStyleAttribute(label, "visibility", "visible") ;
*/
	}
	
	/**
	 * Draw the labels that provide a context to black and red boxes 
	 */
	public void drawChronoContext(int iStepIndex, LdvTime left, LdvTime right, String sText)
	{
		int iLeftMargin = DOM.getElementPropertyInt(_chronoContextElement, "left") ;
		
		// position are converted from time to pixel
		//
		int iLeftPosition  = (int) getInternalPhysicalPosition(left) - iLeftMargin ;
		int iRightPosition = (int) getInternalPhysicalPosition(right) - iLeftMargin ;
	    
		if (iRightPosition <= iLeftPosition)
			return ;
	    
		int iBlockWidth = iRightPosition - iLeftPosition ;
	    	    
		// Create the label or make it visible    
		Element label = null ;
		if (iStepIndex < _contextLabelElements.size()) {
			label = _contextLabelElements.get(iStepIndex) ;
		} 
		// Create the new label
		else 
		{ 
			label = DOM.createDiv() ;
			DOM.setStyleAttribute(label, "position", "absolute") ;
			DOM.setStyleAttribute(label, "display", "none") ;
			DOM.setElementProperty(label, "className", "ldv-context-label") ;
			DOM.appendChild(_chronoContextElement, label) ;
			_contextLabelElements.add(label) ;
		}

		// Set the label text
		DOM.setStyleAttribute(label, "visibility", "hidden");
		DOM.setStyleAttribute(label, "display", "");
		DOM.setElementProperty(label, "innerHTML", sText);

		// Position the label and make it visible
		DOM.setStyleAttribute(label, "left", iLeftPosition + "px") ;
		DOM.setStyleAttribute(label, "width", iBlockWidth + "px") ;
		DOM.setStyleAttribute(label, "visibility", "visible") ;
	}
	
	public void hideRemainingStepElements(int iStepIndex)
	{
		for (int i = iStepIndex; i < _stepBoxElements.size(); i++)
			DOM.setStyleAttribute(_stepBoxElements.get(i), "display", "none") ;
		for (int i = iStepIndex; i < _stepLabelElements.size(); i++)
			DOM.setStyleAttribute(_stepLabelElements.get(i), "display", "none") ;
	}
	
	public void hideRemainingContextElements(int iStepIndex)
	{
		for (int i = iStepIndex; i < _contextLabelElements.size(); i++)
			DOM.setStyleAttribute(_contextLabelElements.get(i), "display", "none") ;
	}
	
	public void drawTimeElements()
	{
		Log.info("Calling drawTimeElements") ;
		
		LdvTime leftLimit = new LdvTime(_topRightTime.getHourTimeZone()) ;
		leftLimit.initFromLdvTime(_topRightTime) ;
		int chronoStepsElementWidth = DOM.getElementPropertyInt(_chronoStepsElement, "offsetWidth");
		
		switch(_currentZoomLevel.getPixUnit())
		{
			case pixMonth :
				leftLimit.addMonths(-chronoStepsElementWidth, true) ;
				drawStepDecades(leftLimit) ;
				drawContextDecades(leftLimit) ;
				break ;
			case pixWeek :
				leftLimit.addDays(-chronoStepsElementWidth*7, true) ;
				drawStepYears(leftLimit) ;
				eraseContext() ;
				break ;
			case pixDay :
				leftLimit.addDays(-chronoStepsElementWidth, true) ;
				drawStepMonths(leftLimit) ;
				drawContextYears(leftLimit) ;
				break ;
			case pixHour :
				leftLimit.addHours(-chronoStepsElementWidth, true) ;
				drawStepDays(leftLimit) ;
				drawContextMonths(leftLimit) ;
				break ;
			case pixMinute :
				leftLimit.addMinutes(-chronoStepsElementWidth, true) ;
				drawStepHours(leftLimit) ;
				drawContextDays(leftLimit) ;
				break ;
			case pixSecond :
				leftLimit.addSeconds(-chronoStepsElementWidth, true) ;
				drawStepMinutes(leftLimit) ;
				drawStepHours(leftLimit) ;
				break ;
			default:
				return ;
		}
	}
	
	/**
	 * Draw steps where each box is a year (12 months) 
	 */
	public void drawStepDecades(LdvTime leftLimit)
	{
		Log.info("Calling drawStepDecades") ;
		
		// First block is the rightest one: from 1st day of _topRightTime's year to _topRightTime
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;	
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), 1, 1, 0, 0, 0) ;		
		boolean bRed = false ;
		
		Log.info("drawStepDecades - drawing blocks") ;
		
		// Draw other blocks, each one representing a complete year 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{
			LdvInt iYear = new LdvInt(left.getFullYear() % 10) ;
			String sText = iYear.intToString(1) ;

			drawChronoStep(iStepIndex, left, right, sText, bRed) ;

			bRed = !bRed ;
			right.initFromLdvTime(left) ;
			
			// Switch to previous year
	    //
			left.addYears(-1, true) ;
			
			iStepIndex++ ;
		}
		
		Log.info("Calling drawStepDecades done for " + iStepIndex + " steps") ;
		
		hideRemainingStepElements(iStepIndex) ;
	}
	
	/**
	 * Erase context panel 
	 */
	public void eraseContext()
	{
		hideRemainingContextElements(0) ;
	}
	
	/**
	 * Draw context where each box is a year (12 months) 
	 */
	public void drawContextDecades(LdvTime leftLimit)
	{
		Log.info("Calling drawContextDecades") ;
		
		// First text in the rightest "box" (from 1st day of _topRightTime's decade to _topRightTime)
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), (right.getFullYear() / 10) * 10, 1, 1, 0, 0, 0) ;
		
		// Draw texts, each in a decade wide "box" (except for extremities) 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{			
			LdvInt iYears = new LdvInt(left.getFullYear()) ;
			String sText  = iYears.intToString(-1) ;
			
			if (leftLimit.isAfter(left))
				left.initFromLdvTime(leftLimit) ;
			
	    drawChronoContext(iStepIndex, left, right, sText) ;

	    right.initFromLdvTime(left) ;
	    
	    // Switch to previous decade
	    //
	    left.addYears(-10, true) ;
			
			iStepIndex++ ;
		}
		
		Log.info("Calling drawContextDecades done for " + iStepIndex + " steps") ;
		
		hideRemainingContextElements(iStepIndex) ;
	}
	
	public void drawStepYears(LdvTime leftLimit)
	{
		// First block is the rightest one: from 1st day of _topRightTime's year to _topRightTime
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;	
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), 1, 1, 0, 0, 0) ;		
		boolean bRed = false;
		
		// Draw other blocks, each one representing a complete year 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{
			LdvInt iYear = new LdvInt(left.getFullYear());
			String sText = iYear.intToString(4) ;

			drawChronoStep(iStepIndex, left, right, sText, bRed) ;

			bRed = !bRed ;
			right.initFromLdvTime(left) ;
			
			// Switch to previous year
	    //
			left.addYears(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingStepElements(iStepIndex) ;
	}
	
	public void drawContextYears(LdvTime leftLimit)
	{
		// First text in the rightest "box" (from 1st day of _topRightTime's year to _topRightTime)
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), 1, 1, 0, 0, 0) ;
		
		// Draw texts, each in a year wide "box" (except for extremities) 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{			
			LdvInt iYears = new LdvInt(left.getFullYear()) ;
			String sText  = iYears.intToString(-1) ;
			
			if (leftLimit.isAfter(left))
				left.initFromLdvTime(leftLimit) ;
			
	    drawChronoContext(iStepIndex, left, right, sText) ;

	    right.initFromLdvTime(left) ;
	    
	    // Switch to previous year
	    //
	    left.addYears(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingContextElements(iStepIndex) ;
	}
	
	public void drawStepMonths(LdvTime leftLimit)
	{
		// First block is the rightest one: from 1st day of _topRightTime's month to _topRightTime
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;	
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), right.getMonth(), 1, 0, 0, 0) ;		
		boolean bRed = false;
		
		// Draw other blocks, each one representing a complete month 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{
			LdvInt iMonth = new LdvInt(left.getMonth()) ;
			String sText = iMonth.intToString(2) ;

			drawChronoStep(iStepIndex, left, right, sText, bRed) ;

			bRed = !bRed ;
			right.initFromLdvTime(left) ;
			
			// Switch to previous month
	    //
			left.addMonths(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingStepElements(iStepIndex) ;
	}
	
	public void drawContextMonths(LdvTime leftLimit)
	{
		// First text in the rightest "box" (from 1st day of _topRightTime's month to _topRightTime)
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), right.getMonth(), 1, 0, 0, 0) ;
		
		// Draw texts, each in a month wide "box" (except for extremities) 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{			
			LdvInt iYears = new LdvInt(left.getFullYear()) ;
			String sText  = iYears.intToString(-1) ;
			LdvInt iMonth = new LdvInt(left.getMonth()) ;
			sText = iMonth.intToString(-1) + "/" + sText ;
			
			if (leftLimit.isAfter(left))
				left.initFromLdvTime(leftLimit) ;
			
	    drawChronoContext(iStepIndex, left, right, sText) ;

	    right.initFromLdvTime(left) ;
	    
	    // Switch to previous month
	    //
	    left.addMonths(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingContextElements(iStepIndex) ;
	}
	
	public void drawStepDays(LdvTime leftLimit)
	{
		// First block is the rightest one: from 1st hour of _topRightTime's day to _topRightTime
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;	
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), right.getMonth(), right.getDate(), 0, 0, 0) ;		
		boolean bRed = false;
		
		// Draw other blocks, each one representing a complete day 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{
			LdvInt iDay = new LdvInt(left.getDate()) ;
			String sText = iDay.intToString(1) ;

			drawChronoStep(iStepIndex, left, right, sText, bRed) ;

			bRed = !bRed ;
			right.initFromLdvTime(left) ;
			
			// Switch to previous day
	    //
			left.addDays(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingStepElements(iStepIndex) ;
	}
	
	public void drawContextDays(LdvTime leftLimit)
	{
		// First text in the rightest "box" (from 1st hour of _topRightTime's day to _topRightTime)
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), right.getMonth(), right.getDate(), 1, 0, 0) ;
		
		// Draw texts, each in a day wide "box" (except for extremities) 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{			
			LdvInt iYears = new LdvInt(left.getFullYear()) ;
			String sText  = iYears.intToString(-1) ;
			LdvInt iMonth = new LdvInt(left.getMonth()) ;
			sText = iMonth.intToString(-1) + "/" + sText ;
			LdvInt iDay   = new LdvInt(left.getDate()) ;
			sText = iDay.intToString(-1) + "/" + sText ;
			
			if (leftLimit.isAfter(left))
				left.initFromLdvTime(leftLimit) ;
			
	    drawChronoContext(iStepIndex, left, right, sText) ;

	    right.initFromLdvTime(left) ;
	    
	    // Switch to previous day
	    //
	    left.addDays(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingContextElements(iStepIndex) ;
	}
	
	public void drawStepHours(LdvTime leftLimit)
	{
		// First block is the rightest one: from 1st minute of _topRightTime's hour to _topRightTime
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;	
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), right.getMonth(), right.getDate(), right.getHours(), 0, 0) ;		
		boolean bRed = false;
		
		// Draw other blocks, each one representing a complete hour 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{
			LdvInt iDay = new LdvInt(left.getHours()) ;
			String sText = iDay.intToString(1) ;

			drawChronoStep(iStepIndex, left, right, sText, bRed) ;

			bRed = !bRed ;
			right.initFromLdvTime(left) ;
			
			// Switch to previous hour
	    //
			left.addHours(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingStepElements(iStepIndex) ;
	}
	
	public void drawContextHours(LdvTime leftLimit)
	{
	// First text in the rightest "box" (from 1st minute of _topRightTime's day to _topRightTime)
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), right.getMonth(), right.getDate(), right.getHours(), 1, 0) ;
		
		// Draw texts, each in a day wide "box" (except for extremities) 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{			
			LdvInt iYears = new LdvInt(left.getFullYear()) ;
			String sText  = iYears.intToString(-1) ;
			LdvInt iMonth = new LdvInt(left.getMonth()) ;
			sText = iMonth.intToString(-1) + "/" + sText ;
			LdvInt iDay   = new LdvInt(left.getDate()) ;
			sText = iDay.intToString(-1) + "/" + sText ;
			LdvInt iHour  = new LdvInt(left.getHours()) ;
			sText = sText + " " + iHour.intToString(-1) + ":00" ;
			
			if (leftLimit.isAfter(left))
				left.initFromLdvTime(leftLimit) ;
			
	    drawChronoContext(iStepIndex, left, right, sText) ;

	    right.initFromLdvTime(left) ;
	    
	    // Switch to previous hour
	    //
	    left.addHours(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingContextElements(iStepIndex) ;
	}
	
	public void drawStepMinutes(LdvTime leftLimit)
	{
	// First block is the rightest one: from 1st second of _topRightTime's minute to _topRightTime
		//
		LdvTime right = new LdvTime(_topRightTime.getHourTimeZone()) ;	
		right.initFromLdvTime(_topRightTime) ;
		LdvTime left = new LdvTime(right.getHourTimeZone(), right.getFullYear(), right.getMonth(), right.getDate(), right.getHours(), right.getMinutes(), 0) ;		
		boolean bRed = false;
		
		// Draw other blocks, each one representing a complete hour 
		//
		int iStepIndex = 0 ;
		while (right.isAfter(leftLimit))
		{
			LdvInt iDay = new LdvInt(left.getMinutes()) ;
			String sText = iDay.intToString(1) ;

			drawChronoStep(iStepIndex, left, right, sText, bRed) ;

			bRed = !bRed ;
			right.initFromLdvTime(left) ;
			
			// Switch to previous minute
	    //
			left.addMinutes(-1, true) ;
			
			iStepIndex++ ;
		}
		
		hideRemainingStepElements(iStepIndex) ;
	}
	
	public LdvTime getTopRightTime() {         
		return _topRightTime ;
	}
	
	public LdvTimeZoomLevel getCurrentZoomLevel() {
		return _currentZoomLevel ;
	}
	
	public int getHourTimeZone() {
		return _topRightTime.getHourTimeZone() ;
	}
}


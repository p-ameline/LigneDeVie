package com.ldv.client.mvp;

import com.google.gwt.dom.client.Style;
import com.google.gwt.dom.client.Style.Position;
import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.FocusPanel;
import com.google.gwt.user.client.ui.ScrollPanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.widgetideas.client.ResizableWidget;

public class LdvProjectWindowView extends Composite implements ResizableWidget, /*SourcesChangeEvents,*/ LdvProjectWindowPresenter.Display
{	
	
	/**
	 * The FlowPanel containing the TimeWidget and the composite
	 */
	private final AbsolutePanel _mainPanel ;
	private final AbsolutePanel _baseLinePanel ;
	private final AbsolutePanel _workSpacePanel ;
	private final FocusPanel    _topFocusPanel ;
	private final FocusPanel    _bottomFocusPanel ;
	private final FocusPanel    _leftFocusPanel ;
	private final FocusPanel    _rightFocusPanel ;
	private final FocusPanel    _barFocusPanel ;
	
	public LdvProjectWindowView()
	{	
		super() ;
		
		_mainPanel = new AbsolutePanel() ;	
		_workSpacePanel = new AbsolutePanel() ;
		_baseLinePanel = new AbsolutePanel() ;
		_topFocusPanel = new FocusPanel() ;
		_bottomFocusPanel = new FocusPanel() ;
		_leftFocusPanel = new FocusPanel() ;
		_rightFocusPanel = new FocusPanel() ;
		_barFocusPanel = new FocusPanel() ;
		
		_mainPanel.addStyleName("ldvProjectWorkspace") ;
		_workSpacePanel.addStyleName("ldvProjectWorkspace-WorkSpacePanel") ;
		_baseLinePanel.addStyleName("ldvProjectWorkspace-BaseLinePanel") ;
		_topFocusPanel.addStyleName("ldvProject-TopFocusPanel") ;
		_bottomFocusPanel.addStyleName("ldvProject-BottomFocusPanel") ;
		_leftFocusPanel.addStyleName("ldvProject-LeftFocusPanel") ;
		_rightFocusPanel.addStyleName("ldvProject-RightFocusPanel") ;
		_barFocusPanel.addStyleName("ldvProject-BarFocusPanel") ;
		
		_mainPanel.getElement().getStyle().setPosition(Position.ABSOLUTE) ;
		_workSpacePanel.getElement().getStyle().setPosition(Position.ABSOLUTE) ;
		_baseLinePanel.getElement().getStyle().setPosition(Position.ABSOLUTE) ;
		_topFocusPanel.getElement().getStyle().setPosition(Position.ABSOLUTE) ;
		_bottomFocusPanel.getElement().getStyle().setPosition(Position.ABSOLUTE) ;
		_leftFocusPanel.getElement().getStyle().setPosition(Position.ABSOLUTE) ;
		_rightFocusPanel.getElement().getStyle().setPosition(Position.ABSOLUTE) ;
		_barFocusPanel.getElement().getStyle().setPosition(Position.ABSOLUTE) ;
		
		_mainPanel.add(_workSpacePanel) ;
		_mainPanel.add(_baseLinePanel) ;
		_mainPanel.add(_topFocusPanel) ;
		_mainPanel.add(_bottomFocusPanel) ;
		_mainPanel.add(_leftFocusPanel) ;
		_mainPanel.add(_rightFocusPanel) ;
		_mainPanel.add(_barFocusPanel) ;
	
		initWidget(_mainPanel) ;
	}	
	
	@Override
	public AbsolutePanel getMainPanel() {
		return _mainPanel ;
	}
	
	@Override
	public AbsolutePanel getBaseLinePanel() {
		return _baseLinePanel ;
	}

	@Override
	public AbsolutePanel getWorkSpacePanel() {
		return _workSpacePanel ;
	}
	
	@Override
	public FocusPanel getTopFocusPanel(){
		return _topFocusPanel ;
	}
	
	@Override
	public FocusPanel getBottomFocusPanel(){
		return _bottomFocusPanel ;
	}
	
	@Override
	public FocusPanel getLeftFocusPanel(){
		return _leftFocusPanel ;
	}
	
	@Override
	public FocusPanel getRightFocusPanel(){
		return _rightFocusPanel ;
	}
	
	@Override
	public FocusPanel getBarFocusPanel(){
		return _barFocusPanel ;
	}
	
	@Override
	public void setHeight(int height){
		String strHeight = Integer.toString(height) + "px" ;
		_mainPanel.setHeight(strHeight) ;
	}
	
	@Override
	public void setTop(int top){
		_mainPanel.getElement().getStyle().setTop(top, Style.Unit.PX) ;
	}
	
	@Override
	public void setBottom(int bottom){
		_mainPanel.getElement().getStyle().setBottom(bottom, Style.Unit.PX) ;
	}
	
	@Override
	public void setLeft(int left){
		_mainPanel.getElement().getStyle().setLeft(left, Style.Unit.PX) ;
	}
	
	@Override
	public void setRight(int right){
		_mainPanel.getElement().getStyle().setRight(right, Style.Unit.PX) ;
	}
	
	@Override
	public Widget asWidget() {
		return this ;
	}

	@Override
	public void startProcessing() {
		
	}

	@Override
	public void stopProcessing() {
		
	}

	@Override
	public void onResize(int width, int height) {
		// TODO Auto-generated method stub		
	}
}

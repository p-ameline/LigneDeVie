package com.ldv.shared.graph;

import com.ldv.shared.model.LdvInt;

public class LdvModelNode
{
	protected String _sTREE_ID ;
	protected String _sNODE ;

	protected String _sTYPE ;
	protected String _sLEXICON ;
	protected String _sCOMPLEMENT ;
	protected String _sCERTITUDE ;
	protected String _sPLURAL ;
	protected String _sUNIT ;
	protected String _sFREE_TEXT ;
	
	protected String _sLOCALISATION ;
	protected String _sVISIBLE ;
	protected String _sINTEREST ;

	static protected String BASE_LOCALISATION = "+0000000" ;
	
	/**
	 * Default constructor 
	 * 
	 **/
	public LdvModelNode()
	{
		init() ; 
	}
	
	/**
	 * Basic lexicon constructor  
	 * 
	 * @param sLexicon Lexicon concept this Node will represent
	 * 
	 **/
	public LdvModelNode(String sLexicon)
	{
		init() ;
		
		_sLEXICON = sLexicon ;
	}
	
	/**
	 * Constructor for a concept and its complement  
	 * 
	 * @param sLexicon Lexicon concept this Node will represent
	 * @param sComplement Complement
	 * 
	 **/
	public LdvModelNode(String sLexicon, String sComplement)
	{
		init() ;
		
		_sLEXICON    = sLexicon ;
		_sCOMPLEMENT = sComplement ;
	}
	
	/**
	 * Constructor for a concept with value and unit  
	 * 
	 * @param sLexicon Lexicon concept this Node will represent
	 * @param sComplement Complement
	 * 
	 **/
	public LdvModelNode(String sLexicon, String sValue, String sUnit)
	{
		init() ;
		
		_sLEXICON    = sLexicon ;
		_sCOMPLEMENT = sValue ;
		_sUNIT       = sUnit ;
	}
	
	/**
	 * Full constructor  
	 * 
	 **/
	public LdvModelNode(String sTreeId, String sNodeId, String sType, String sLexicon,
			                String sComplement, String sCertitude, String sPlural, String sUnit,
			                String sFreeText, String sLoc, String sVisible, String sInterest)
	{
		_sTREE_ID      = sTreeId ;
		_sNODE         = sNodeId ;

		_sTYPE         = sType ;
		_sLEXICON      = sLexicon ;
		_sCOMPLEMENT   = sComplement ;
		_sCERTITUDE    = sCertitude ;
		_sPLURAL       = sPlural ;
		_sUNIT         = sUnit ;
		_sFREE_TEXT    = sFreeText ;
		
		_sLOCALISATION = sLoc ;
		_sVISIBLE      = sVisible ;
		_sINTEREST     = sInterest ;
	}
	
	/**
	 * Copy constructor  
	 * 
	 * @param sourceNode Model node
	 * 
	 **/
	public LdvModelNode(LdvModelNode sourceNode)
	{
		initFromNode(sourceNode) ;
	}
	
	/**
	 * Reset all information
	 * 
	 **/
	private void init()
	{
		_sTREE_ID      = "" ;
		_sNODE         = "" ;

		_sTYPE         = "" ;
		_sLEXICON      = "" ;
		_sCOMPLEMENT   = "" ;
		_sCERTITUDE    = "" ;
		_sPLURAL       = "" ;
		_sUNIT         = "" ;
		_sFREE_TEXT    = "" ;
		
		_sLOCALISATION = "" ;
		_sVISIBLE      = "" ;
		_sINTEREST     = "" ; 
	}
	
	/**
	 * Sets all information by copying other node content   
	 * 
	 * @param otherNode Model node
	 * @return void
	 * 
	 **/
	public void initFromNode(LdvModelNode otherNode)
	{
		if (null == otherNode)
		{
			init() ;
			return ;
		}
		
		_sTREE_ID      = otherNode._sTREE_ID ;
		_sNODE         = otherNode._sNODE ;

		_sTYPE         = otherNode._sTYPE ;
		_sLEXICON      = otherNode._sLEXICON ;
		_sCOMPLEMENT   = otherNode._sCOMPLEMENT ;
		_sCERTITUDE    = otherNode._sCERTITUDE ;
		_sPLURAL       = otherNode._sPLURAL ;
		_sUNIT         = otherNode._sUNIT ;
		_sFREE_TEXT    = otherNode._sFREE_TEXT ;
		
		_sLOCALISATION = otherNode._sLOCALISATION ;
		_sVISIBLE      = otherNode._sVISIBLE ;
		_sINTEREST     = otherNode._sINTEREST ; 
	}

	/**
	 * Get node's line number   
	 * 
	 **/
	public int getLine() { return getIndice(0) ; }
	
	/**
	 * Get node's column number   
	 * 
	 **/
  public int getCol()  { return getIndice(1) ; }
  
  /**
	 * Get node's coordinate   
	 * 
	 * @param indice 0 for line, 1 for column
	 * 
	 **/
  private int getIndice(int indice)
  {
  	if (_sLOCALISATION.equals(""))
      return 0 ;

    String sStringToConvert = "" ;

    // Starting by '+': format is "+LLLLCCC"
    //                             01234567
    if ('+' == _sLOCALISATION.charAt(0))
    {
      if      (0 == indice)
        sStringToConvert = _sLOCALISATION.substring(1, 5) ;
      else if (1 == indice)
        sStringToConvert = _sLOCALISATION.substring(5, 8) ;
    }
    // Not starting by '+': format is "LLCCzztt"
    //                                 01234567
    else
    {
      if ((indice >= 0) && (indice < 4))
        sStringToConvert = _sLOCALISATION.substring(2 * indice, 2 * indice + 2) ;
    }

    if (sStringToConvert.equals(""))
      return 0 ;

    int iValeur = 0 ;
    
    // base 62 = 26 + 26 + 10
    //
    for (int i = 0 ; i < sStringToConvert.length() ; i++)
    {
      iValeur = 62 * iValeur ;
      char caract = sStringToConvert.charAt(i) ;

      if      ((caract >= '0') && (caract <= '9'))
        iValeur += caract - '0' ;
      else if ((caract >= 'A') && (caract <= 'Z'))
        iValeur += caract + 10 - 'A' ;
      else if ((caract >= 'a') && (caract <= 'z'))
        iValeur += caract + 36 - 'a' ;
    }
    
    return iValeur ;
  }
  
  /**
	 * Set node's line number   
	 * 
	 **/
	public void setLine(int iLine) { setIndice(0, iLine) ; }
	
	/**
	 * Set node's column number   
	 * 
	 **/
  public void setCol(int iCol)  { setIndice(1, iCol) ; }
  
  /**
	 * Set node's coordinate   
	 * 
	 * @param indice 0 for line, 1 for column
	 * @param value Value to be set for this coordinate
	 * 
	 **/
  private void setIndice(int iIndice, int iValue)
  {
  	if ((iIndice < 0) || (iIndice > 3))
      return ;

    // reference format is "+LLLLCCC"
    //
    if (_sLOCALISATION.equals(""))
    	_sLOCALISATION = BASE_LOCALISATION ;
    //
    // Old format - need to adapt
    //
    else if ('+' != _sLOCALISATION.charAt(0))
    {
    	int iOtherValue = 0 ;
      if (0 == iIndice)
      	iOtherValue = getCol() ;
      else
      	iOtherValue = getLine() ;

      _sLOCALISATION = BASE_LOCALISATION ;

      if (0 == iIndice)
      	setCol(iOtherValue) ;
      else
      	setLine(iOtherValue) ;
    }

    int iSize = 4 ;
    if (1 == iIndice)
    	iSize = 3 ;

    LdvInt ldvInt = new LdvInt(iValue) ;
    String sValue = ldvInt.intToBaseString(iSize, 62) ;

    if (sValue.equals(""))
    	return ;

    if (0 == iIndice)
    	_sLOCALISATION = "+" + sValue + _sLOCALISATION.substring(5, 8) ;
    else if (1 == iIndice)
    	_sLOCALISATION = _sLOCALISATION.substring(0, 5) + sValue ;
  }
	
	public String getTreeID()
  {
  	return _sTREE_ID ;
  }
	public void setTreeID(String sID)
  {
		_sTREE_ID = sID ;
  }
	
	public String getNodeID()
  {
  	return _sNODE ;
  }
	public void setNodeID(String sID)
  {
		_sNODE = sID ;
  }

	public String getType()
  {
  	return _sTYPE ;
  }
	public void setType(String sTYPE)
  {
  	_sTYPE = sTYPE ;
  }

	public String getLexicon()
  {
  	return _sLEXICON ;
  }
	public void setLexicon(String sLEXICON)
  {
  	_sLEXICON = sLEXICON ;
  }

	public String getComplement()
  {
  	return _sCOMPLEMENT ;
  }
	public void setComplement(String sCOMPLEMENT)
  {
  	_sCOMPLEMENT = sCOMPLEMENT ;
  }

	public String getCertitude()
  {
  	return _sCERTITUDE ;
  }
	public void setCertitude(String sCERTITUDE)
  {
  	_sCERTITUDE = sCERTITUDE ;
  }

	public String getPlural()
  {
  	return _sPLURAL ;
  }
	public void setPlural(String sPLURAL)
  {
  	_sPLURAL = sPLURAL ;
  }

	public String getUnit()
  {
  	return _sUNIT ;
  }
	public void setUnit(String sUNIT)
  {
  	_sUNIT = sUNIT ;
  }

	public String getFreeText()
  {
  	return _sFREE_TEXT ;
  }
	public void setFreeText(String sFREETEXT)
  {
  	_sFREE_TEXT = sFREETEXT ;
  }

	public String getLocalisation()
  {
  	return _sLOCALISATION ;
  }
	public void setLocalisation(String sLOCALISATION)
  {
  	_sLOCALISATION = sLOCALISATION ;
  }

	public String getVisible()
  {
  	return _sVISIBLE ;
  }
	public void setVisible(String sVISIBLE)
  {
  	_sVISIBLE = sVISIBLE ;
  }

	public String getInterest()
  {
  	return _sINTEREST ;
  }
	public void setInterest(String sINTEREST)
  {
  	_sINTEREST = sINTEREST ;
  }
}
